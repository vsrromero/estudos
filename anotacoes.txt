
|--------------------------------------------------------------------------
| Definições
|--------------------------------------------------------------------------


* Controllers são classes

* Funções - nas classes se chamam métodos, nos controllers se chamam actions

* Métodos estáticos são métodos que não precisam ser instanciados, basta usar o nome da classe seguindo de :: e o método.
    Ex.: Classe::metodo();




|--------------------------------------------------------------------------
| Para criar um projeto novo no laravel usando console
|--------------------------------------------------------------------------



* Acessar via console a pasta que deseja que o projeto seja criado.

* Digitar composer create-project --prefer-dist laravel/laravel nome_do_projeto "versão do laravel".
    Vale lembrar que o nome do projeto será a pasta que o comando irá criar;



|--------------------------------------------------------------------------
| Para iniciar esse projeto
|--------------------------------------------------------------------------

* acessar a pasta public que foi criada

* executar o comando php -S uri/url:porta

    php -S localhost:8000


* quando quiser rodar esse projeto php artisan serve --port=8082 ou porta desejada


|--------------------------------------------------------------------------
| Para criar um controller usando artisan
|--------------------------------------------------------------------------


php artisan make:controller NomeController

Obs.: como boa prática deve-se criar o nome do controller com a primeira letra maiúscula + palavra Controller
Ex.: php artisan make:controller TesteController


|--------------------------------------------------------------------------
| Trabalhando com views
|--------------------------------------------------------------------------


As views são os arquivos html ou php

Para criar uma view é necessário criá-las na pasta resources/views

os arquivos precisam ser criados da seguinte forma: nomeDoArquivo.blade.php - quando digita .blade.php você identifica para o laravel que esta é uma view

no controller cria-se uma action retornando essa view:

    public function actionName(){
        return view('path.file')
    }

    * exemplo para retornar a view index que está localizada dentro da pasta website na pasta view:

    public function actionName(){
        return view('website.index')
    }


    * note que não é necessário escrever .blade.php uma vez que o método view nativo do Laravel reconhece as views pelos nomes criadas no local correto especificado acima.



|--------------------------------------------------------------------------
| Passando parâmetros nas rotas / parâmetros obrigatórios e opcionais
|--------------------------------------------------------------------------

Para definir uma rota como uma rota que aceita parâmentro basta colocar {parâmetro} na rota indicada e definir a variável



exemplo contact/parametro1/parametro2, neste caso os parâmetros serão obrigatórios, se passar somente um parâmetro retorna um erro, ou seja, ou passa-se os dois ou nenhum.

para um parâmetro ser opcional basta colocar uma? no final de um parâmetro, vamos supor uma rota que tenha dois parâmetros

Route::get('/contact/{name}/{message?}', function($name, $message)
{
    echo "$name . $message";
}

);

o primeiro parâmetro é obrigatório e o segundo é opicional


|--------------------------------------------------------------------------
| Agrupando rotas
|--------------------------------------------------------------------------


Para agrupar rotas é necessário escolher um prefixo ao qual elas ficarão agrupadas

Cria-se então uma rota usando no lugar do verbo http o método prefix;
Route::prefix

Então escolhe-se a string que será o prefixo e depois chamando o método 'group', passa-se uma function() com as rotas dentro.

Ex.:


Route::prefix('/app')->group(function(){

    Route::get('/clients', [ClientsController::class, 'clients']);
    Route::get('/suppliers', [SuppliersController::class, 'suppliers']);
    Route::get('/products', [ProductsController::class, 'products']);

});


|--------------------------------------------------------------------------
| Nomeando uma rota
|--------------------------------------------------------------------------

basta usar o método 'name' após a rota e atribuir um nome.

Ex.: Route::get('/contact', [ContactController::class, 'contact'])->name('web.contact');

A vantagem é que agora podemos alterar qualquer informação da rota sem ter que ficar trocando referências, uma vez que métodos e outras referências serão feitas através do nome da rota.

Por exemplo, nos links agora não se passa mais a referência da rota como por exemplo /contact e sim o nome da rota dentro da função route('nome.da.rota').

Ex.: <a href="{{route('web.contact')}}">

Caso mudemos a rota de /contact para /talktous não será necessário alterar todos os links, uma vez que agora eles se referenciam através do nome da rota, que é web.contact

Note que é necessário usar {{  }} para usar função laravel dentro do html;


|--------------------------------------------------------------------------
| Usando layouts
|--------------------------------------------------------------------------

@extends

É usado quando a necessidade é captar o recuso de um layout para a view

O comando extends recebe o path/caminh de onde o layout está.

No caso deste projeto todo o esqueleto html (html-head-body) está em um layout chamado htmlBody.blade.php, desta forma precisamos que as págians extendam as informações até este escopo, então usando a função @extends('path') indicamos que estamos extendendo nosso conteúdo até esse layout.

Precisa-se então criar uma sessão do conteúdo que será enviado para o layout desejado, para fazer isso usa-se a função @section('nome.da.sessão') e @endsection

Supondo então que temos o seguinte conteúdo para ser passado para o layout do esqueleto html

<div>
    <h1>Conteúdo da página</h1>
    <ul>
        <li>Item 1</li>
        <li>Item 2</li>
    </ul>
</div>

com as tags @section informamos qual sessão deve ser enviada ao layout e no layout usamos a função @yield('nomeDaSection') para receber essa sessão

@section('conteudoDoBody')

<div>
    <h1>Conteúdo da página</h1>
    <ul>
        <li>Item 1</li>
        <li>Item 2</li>
    </ul>
</div>

@endsection

e no layout usa-se a função @yield dentro das tags <body></body>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Document</title>
</head>
<body>
    @yield('conteudoDoBody')
</body>
</html>


**Para passar um valor dinâmico para um @yield basta criar uma section informando para quase section vai com o valor apropriado

No exemplo acima todas as págians estão recebendo como título o valor Document, para resolver isso basta em cada página que for criando criar a section com o parâmetro

No arquivo de layout aplica-se então o @yield

No layout:

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>@yield('title')</title>

Na página

@section('title' , 'Título da página')


**Para incluir um block feito em outro arquivo, por exemplo um menu que aparece em várias páginas, em um arquivo, basta usar @include('path.arquivo')

Ex.:

Temos o seguinte menu salvo em um arquivo chamado navbar.blade.php: //LEMBRANDO: os arquivos blades precisam todos estarem salvos como nome.blade.php

<nav>
<ul>
    <li><a href="{{ route('common.index') }}">Main</a></li>
    <li><a href="{{ route('common.aboutUs') }}">About us</a></li>
    <li><a href="{{ route('common.contact') }}">Contact</a></li>
    <li><a href="{{ route('common.login') }}">Sign in</a></li>
</ul>
</nav>

Para incluir este mesmo menu em diversas páginas, basta usar o comoando include no local da página que programaria este menu

@include('layouts.navbarCommon')

Obs.: no laravel para definir o caminho de um arquivo usa-se "." ao invés de "/"


|--------------------------------------------------------------------------
| Trabalhando com método post
|--------------------------------------------------------------------------


Criar a rota com método post no arquivo de rotas web.php

Route::post('/contact', [ContactController::class, 'contact'])->name('common.contact');
**pode ter o mesmo name e chamar a mesma action, uma vez que o método é diferente o Laravel já interpreta isso

Inserir no formulário dentro da view a instrução @csrf


|--------------------------------------------------------------------------
| MODELS e MIGRATIONS
|--------------------------------------------------------------------------

Para criar um model ou migration.

php artisan make:model ou make:migration

caso queira criar uma migration automaticamente inserir a instrução -m ao final do comando, ex.: php artisan make:model Produto -m

Models são criados com nomes no plural e migragions com nome no singular

    | manipulando SGBD através das Migrations |

Para incluir usa-se o método up e para excluir usa-se o método down

criando:
--------
    usa-se o método up();

    Schema::create('nome_tabela', function (Blueprint $table) {
        $table->id();
        $table->integer*('nome_coluna');
    });

    as colunas que serão inclusas são descritas dentro dos *métodos que são expressos pelas tipagens de dados* $table: $table->integer('estoque');

    após criar todos as colunas que deseja basta executar o comando php artisan migrate

incluindo novas colunas:
------------------------
    usa-se o método up();

    Cria-se uma nova migration (não é necessário criar o model)

    no método up, ao invés de usar Schema::create usa-se Schema::table

    Schema::table('nome_tabela' function (Blueprint $table){
        $table->integer*('nome_coluna');
    });

    *método expresso pele tipagem de dados*


apagando tabelas e colunas:
---------------------------
    usa-se o método down()

    Para apagar colunas precisa alterar a tabela, para isso não se usa o método create e sim o método drop / dropIfExists

    Schemma::dropIfExists('nome_tabela'); //dropa a tabela
    ou
    Schemma::dropIfExists('nome_tabela' , ['nome_coluna']); //dropa a coluna da tabela


criando relacionamento com chave estrangeira:
---------------------------------------------

A chave que o laravel cria não é int, é bigInt somente valores positivos (unsigned)

Na hora que for criar a chave estrangeira na tabela então usa-se:

De 1 para 1:

Schema::create('nome_tabela', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('nome_coluna*');


    //relationship constraint-foreign key
    $table->foreign(nome_coluna_nessa_tabela_recebera_chave_estrangeira*')->references('coluna_tabela_pai_contendo_id')->on('nome_tabela_com_a_coluna');
    $table->unique('nome_coluna'); //unique define que o relacionamento será de 1 para 1
});

Exemplo atual

Schema::create('product_details', function (Blueprint $table) {
    $table->id();
    $table->unsignedBigInteger('product_id');

$table->foreign('product_id')->references('id')->on('products');
$table->unique('product_id');
});

*// por convenção usa-se o nome da tabela que guarda a chave primária _ nome da colua Ex.: na tabela produto quero a coluna id que é aonde está a chave primária


De 1 para n

segue o mesmo que de 1 para 1 porém se omite o método unique

De n para na

Cria-se uma tabela auxiliar para armazenar as FK


|--------------------------------------------------------------------------
| CRUD pelo console
|--------------------------------------------------------------------------

Primeiramente verificar se o plural dos Models estão correto uma vez que o Eloquent acresenta um 's' para fazer o plural das palavras e pode não ser o correto com o que está no SGBD
Exemplo: Model Branch - o eloquente vai buscar no banco de dados 'branchs' quando a tabela é 'branches', para corrigir isso, no model precisar cirar um atributo protected $table com o nome da tabela no banco de dados;
Exemplo:
protected $table = 'branches';
aonde branches é o nome da tabela;

* Todos os metos são feitos pelo Tinker

Digitar no console php artisan Tinker


| Create
----------

Instanciando objeto:

$variavel = new \pathDoModel\Model();
$variavel->nome_coluna = 'Valor'; //se for numero não usar aspas

-após passar todos os valores que deseja executar-
$variavel->save();


Usando método estático:


No Model que irá fazer a o create, precisa criar um atributo protected fillable = ['coluna1' , 'coluna2'], com o nome das colunas que irá inserir os dados
Ex.:
protected $fillable = ['branch_name'];

para fazer a o create então bastar dar um 'use' na classe e usar o método estático create passando um array

//opicional, atribuir o caminho em formato de string a uma variável: $foo = '\App\Model', assim sempre que precisar usar esse path basta usar a variável
use \App\Model

\App\Model::create(['nome_coluna'=>'valor']);

| Read
----------
//opicional, atribuir o caminho em formato de string a uma variável: $foo = '\App\Model', assim sempre que precisar usar esse path basta usar a variável

* Selecionar todos

use \path;
$foo = Model::all();

Ex.:
use \App\Branch;
$select = Branch::all();

* Selecionar por pk

use \path;
$foo = Model::find(pk);

Ex.:
use \App\Branch;
$select = Branch::find(1);

buscar o resultado de uma coluna de uma pk

use \path;
$foo = Model::find(pk);

Ex.:
use \App\Branch;
$result = \App\Branch::find(1);

echo $result->branch_name

* Selecionar usando WHERE

use \path;

where()
retorna onde o valor == x
$foo = Model::where('nome_colua','operador_comparacao','valor');

o eloquente vai atribuir um builder para a variável $foo, então é necessário usar método ->get() para ver a consulta
$foo = Model::where('nome_colua','operador_comparacao','valor')->get();

whereIn() whereNotIn()
retorna um conjunto de parâmentros
$foo = Model::whereIn('nome_colua','conjunto_paramentros')->get();
$foo = SiteContact::whereIn('contact_reason', [1 ,3])->get(); //1 ou 3

whereBetween() whereNotBetween();
retorna um conjunto de um intervalo, entre  -  >=1  <=3
$foo = Model::whereBetween('nome_colua','conjunto_paramentros')->get();
$foo = SiteContact::whereBetween('contact_reason', [1 ,3])->get(); //entre 1 e 3

* Selecionar usando dois ou mais WHERE
basta usar quantas regras forem necessárias conectando-as com ->
$resultado = SiteContact::where('name', '<>' , 'Victor')->whereIn('contact_reason' , [1,3])->whereBetween('created_at' , ['2022-07-07 20:23:31' , '2022-07-10 16:35:11'])->get();



|--------------------------------------------------------------------------
| Seeder
|--------------------------------------------------------------------------

* criar seed
php artisan make:seeder ClasseSeeder - php artisan make:seeder SiteContactSeeder

* Verificar se na classe model SiteContact existe o atributo fillable com o array das colunas do banco de dados caso for usar o método create ao invés da instância do objeto

* No arquivo DatabaseSeeder precisa haver o método informando que a Classe irá fazer o seeding
* No mesmo arquivo acima precisa comentar as classes que não deseja executar o seeding ou no comando do artisan informar a classe que deseja processar
php artisan db:seed --class=SiteContactSeeder




|--------------------------------------------------------------------------
| Factory
|--------------------------------------------------------------------------

Criar factory

php artisan make:factory SiteContactFactory --model=SiteContact

1 - no arquivo factory, exemplo usado SiteContactFactory: (ou na factory que deseja criar as instruções)
    Descrever através de um array associativo e informar o nome das colunas que deseja popular seguido do objeto $faker-> o que deseja popular.
    Esta relação para as regras de população da tabela está no github e o repositório pode ser obtido no arquivo composer.json no block require-dev, a biblioteca usada é a "fzaninotto/faker": "^1.9.1", então basta acessar github.com/fzaninotto/faker e buscar o que deseja que a biblioteca popule, por exemplo, se quiser popular nome, buscar qual o atributo que deve relacionar ao objeto $faker, que no caso é name, então ficaria $faker->name

    exemplo de um factory:

    aonde o primeiro parâmetro do método define seria a classe Model
    $factory->define(SiteContact::class, function (Faker $faker) {
        return [
            'name' => $faker->name,
            'phone' => $faker->tollFreePhoneNumber,
            'email' => $faker->unique()->email,
            'contact_reason' => $faker->numberBetween(1,3),
            'message' => $faker->text(200)
        ];
    });


2 - no arquivo Seeder, exemplo usado SiteContactSeeder: (ou na seeder que deseja passar as intruções para popular a tabela)
    no método run chamar o método factory informando a classe model que deseja popular, no exemplo em questão SiteContact, e informar a quantidade de registro que deseja que seja gerado.

    Exemplo do arquivo Seeder
    factory(SiteContact::class, 100)->create();

3 - no arquivo DatabaseSeeder informar a seeder que deseja ser executada
    php artisan db:seed --class=ClasseSeeder (lembrando que sen não passar a classe no comando, será executado tudo que estiver no método run da classe DatabaseSeeder)

    ou no exemplo atual:
    php artisan db:seed --class=SiteContactSeeder


|--------------------------------------------------------------------------
| Exemplos de validação de campos feitos no Controller
|--------------------------------------------------------------------------

    //save on DB
    public function saveDb(Request $request){
        //validate fields before saving
        public function saveDb(Request $request){
            //validate fields before saving
            $request->validate(
                [
                    'name' => 'required | min:3 | max:50',
                    'phone' => 'required | min:5 | max:20',
                    'email' => 'email',
                    'contact_reason_id' => 'required',
                    'message' => 'required',
                ],
                [
                    'contact_reason_id.required' => 'Please select one :attribute' //Custom message for this reason on this field
                ]
            );



|--------------------------------------------------------------------------
| Implementando middleware
|--------------------------------------------------------------------------

* Implementando na rota

Route::get('/', [MainController::class, 'main'])->name('common.index') //middleware

* Para declarar o middleware antes do verbo http tem que mudar a forma como chama a action do controller, usar 'Controller@action' ao invés de [Controller::class , 'action']
Route::middleware(LogAccessMiddleware::class)
->get('/', 'MainController@main')
->name('common.index')

ou atribuir depois do verbo http

Route::get('/', [MainController::class, 'main'])
->middleware(LogAccessMiddleware::class)
->name('common.index')

* Implementando no controller

Cirar um método construtor

Chamar o objeto middleware passando como parâmetro a classe middleware desejada.

public function __construct()
{
    $this->middleware(LogAccessMiddleware::class);
}

* implementar para todas as rotas de um group
No arquivo Kernel.php localizado em /App/Http/Kernel.php colocar o namespace do middleware que implementará a todas as rotas no grupo desejado.

No exemplo abaixo se colocar o namespace do middleware, irá implementar o middleware a todas as rotas do grupo web

protected $middlewareGroups = [
    'web' => [
        \App\Http\Middleware\EncryptCookies::class,
        \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
        \Illuminate\Session\Middleware\StartSession::class,
        // \Illuminate\Session\Middleware\AuthenticateSession::class,
        \Illuminate\View\Middleware\ShareErrorsFromSession::class,
        \App\Http\Middleware\VerifyCsrfToken::class,
        \Illuminate\Routing\Middleware\SubstituteBindings::class,
    ],

]

* criar um apelido para um middleware

No arquivo Kernel.php localizado em /App/Http/Kernel.php adcionar em protected $routeMiddleware o apelido que deseja para o middleware seguido do namespace;

'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

caso queira nomear o apelido com duas palavras usar o . para separalá-las: 'foo.foo2'

então para implementar na rota por exemplo, usar o método middleware('apelido')

Ex.:

Route::get('/', [MainController::class, 'main'])->name('common.index')->middleware('apelido');

Nos controllers

public function __construct()
{
    $this->middleware('apelido');
}



